<?xml version="1.0" encoding="UTF-8" ?>

<Server version="8">
	<Name>OvenMediaEngine</Name>
	<!-- Host type (origin/edge) -->
	<Type>origin</Type>
	<!-- Specify IP address to bind ("*" means all IPv4 IPs, "::" means all IPv6 IPs) -->
	<!-- Uncomment the line below to enable IPv6 -->
	<!-- <IP>::</IP> -->
	<IP>*</IP>
	<PrivacyProtection>false</PrivacyProtection>
	<!--
	To get the public IP address(mapped address of stun) of the local server.
	This is useful when OME cannot obtain a public IP from an interface, such as AWS or docker environment.
	If this is successful, you can use ${PublicIP} in your settings.
	-->
	<StunServer>stun.l.google.com:19302</StunServer>

	<Modules>
		<!--
		Currently OME only supports h2 like all browsers do. Therefore, HTTP/2 only works on TLS ports.
		-->
		<HTTP2>
			<Enable>true</Enable>
		</HTTP2>

		<LLHLS>
			<Enable>true</Enable>
		</LLHLS>

		<!-- P2P works only in WebRTC and is experiment feature -->
		<P2P>
			<!-- disabled by default -->
			<Enable>false</Enable>
			<MaxClientPeersPerHostPeer>2</MaxClientPeersPerHostPeer>
		</P2P>
	</Modules>

	<!-- Settings for the ports to bind -->
	<Bind>
		<!-- Enable this configuration if you want to use API Server -->
		<Managers>
			<API>
				<Port>${env:OME_API_PORT:8081}</Port>
				<TLSPort>${env:OME_API_TLS_PORT:8082}</TLSPort>
				<WorkerCount>1</WorkerCount>
			</API>
		</Managers>
		<Providers>
			<!-- Pull providers -->
			<RTSPC>
				<WorkerCount>1</WorkerCount>
			</RTSPC>
			<OVT>
				<WorkerCount>1</WorkerCount>
			</OVT>
			<!-- Push providers -->
			<RTMP>
				<Port>${env:OME_RTMP_PROV_PORT:1935}</Port>
				<WorkerCount>1</WorkerCount>
			</RTMP>
			<SRT>
				<Port>${env:OME_SRT_PROV_PORT:9999}</Port>
				<WorkerCount>1</WorkerCount>
			</SRT>
			<WebRTC>
				<Signalling>
					<Port>${env:OME_SIGNALLING_PORT:3333}</Port>
					<WorkerCount>1</WorkerCount>
					<!-- If you want to use TLS, specify the TLS port -->
					<TLSPort>${env:OME_SIGNALLING_TLS_PORT:3334}</TLSPort>
				</Signalling>
				<IceCandidates>
					<TcpRelay>${env:OME_TCP_RELAY_ADDRESS:*:3478}</TcpRelay>
					<TcpForce>true</TcpForce>
					<TcpRelayWorkerCount>1</TcpRelayWorkerCount>
					<IceCandidate>${env:OME_ICE_CANDIDATES:*:10006/udp}</IceCandidate>
				</IceCandidates>
			</WebRTC>
		</Providers>

		<Publishers>
			<!-- The OVT is protocol for ORIGIN-EDGE -->
			<OVT>
				<Port>${env:OME_ORIGIN_PORT:9000}</Port>
				<WorkerCount>1</WorkerCount>
			</OVT>
			<LLHLS>
				<!--
				OME only supports h2, so LLHLS works over HTTP/1.1 on non-TLS ports.
				LLHLS works with higher performance over HTTP/2,
				so it is recommended to use a TLS port.
				-->
				<Port>${env:OME_LLHLS_STREAM_PORT:3333}</Port>
				<TLSPort>${env:OME_LLHLS_STREAM_TLS_PORT:3334}</TLSPort>
				<WorkerCount>1</WorkerCount>
			</LLHLS>
			<WebRTC>
				<Signalling>
					<Port>${env:OME_SIGNALLING_PORT:3333}</Port>
					<WorkerCount>1</WorkerCount>
					<!-- If you want to use TLS, specify the TLS port -->
					<TLSPort>${env:OME_SIGNALLING_TLS_PORT:3334}</TLSPort>
				</Signalling>
				<IceCandidates>
					<TcpRelay>${env:OME_TCP_RELAY_ADDRESS:*:3478}</TcpRelay>
					<TcpForce>true</TcpForce>
					<TcpRelayWorkerCount>1</TcpRelayWorkerCount>
					<IceCandidate>${env:OME_ICE_CANDIDATES:*:10006/udp}</IceCandidate>
				</IceCandidates>
			</WebRTC>
		</Publishers>
	</Bind>

	<!--
		Enable this configuration if you want to use API Server

		<AccessToken> is a token for authentication, and when you invoke the API, you must put "Basic base64encode(<AccessToken>)" in the "Authorization" header of HTTP request.
		For example, if you set <AccessToken> to "ome-access-token", you must set "Basic b21lLWFjY2Vzcy10b2tlbg==" in the "Authorization" header.
	-->

	<Managers>
		<Host>
			<Names>
				<Name>*</Name>
			</Names>
			<TLS>
				<CertPath>${env:OME_TLS_CERT_PATH:/opt/ovenmediaengine/bin/cert.pem}</CertPath>
				<KeyPath>${env:OME_TLS_KEY_PATH:/opt/ovenmediaengine/bin/privkey.pem}</KeyPath>
				<ChainCertPath>${env:OME_TLS_CHAIN_PATH:/opt/ovenmediaengine/bin/chain.pem}</ChainCertPath>
			</TLS>
		</Host>
		<API>
			<AccessToken>${env:OME_API_ACCESS_TOKEN:ome-access-token}</AccessToken>
			<CrossDomains>
				<Url>*</Url>
			</CrossDomains>
		</API>
	</Managers>

	<VirtualHosts>
		<!--
			You can include multiple XML files by doing the following:
			<VirtualHost include="sites-enabled/*.xml" />
		-->
		<VirtualHost include="VHost*.xml" />
		<VirtualHost>
			<Name>default</Name>
			<!--Distribution is a value that can be used when grouping the same vhost distributed across multiple servers. This value is output to the events log, so you can use it to aggregate statistics. -->
			<Distribution>ovenmediaengine.com</Distribution>

			<!-- Settings for multi ip/domain and TLS -->
			<Host>
				<Names>
					<!-- Host names
						<Name>stream1.airensoft.com</Name>
						<Name>stream2.airensoft.com</Name>
						<Name>*.sub.airensoft.com</Name>
						<Name>192.168.0.1</Name>
					-->
					<Name>${env:OME_DEFAULT_VIRTUALHOST_NAME:*}</Name>
				</Names>
				<TLS>
					<CertPath>${env:OME_TLS_CERT_PATH:/opt/ovenmediaengine/bin/cert.pem}</CertPath>
					<KeyPath>${env:OME_TLS_KEY_PATH:/opt/ovenmediaengine/bin/privkey.pem}</KeyPath>
					<ChainCertPath>${env:OME_TLS_CHAIN_PATH:/opt/ovenmediaengine/bin/chain.pem}</ChainCertPath>
				</TLS>
			</Host>

			<!-- Refer https://airensoft.gitbook.io/ovenmediaengine/signedpolicy
			<SignedPolicy>
				<PolicyQueryKeyName>policy</PolicyQueryKeyName>
				<SignatureQueryKeyName>signature</SignatureQueryKeyName>
				<SecretKey>aKq#1kj</SecretKey>

				<Enables>
					<Providers>rtmp,webrtc,srt</Providers>
					<Publishers>webrtc,hls,dash,lldash</Publishers>
				</Enables>
			</SignedPolicy>
			-->

			<!--
			<AdmissionWebhooks>
				<ControlServerUrl></ControlServerUrl>
				<SecretKey></SecretKey>
				<Timeout>3000</Timeout>
				<Enables>
					<Providers>rtmp,webrtc,srt</Providers>
					<Publishers>webrtc,hls,llhls,dash,lldash</Publishers>
				</Enables>
			</AdmissionWebhooks>
			-->

			<!-- Settings for ProxyPass (It can specify origin for each path) -->
			<Origins>
				<Properties>
					<NoInputFailoverTimeout>3000</NoInputFailoverTimeout>
					<UnusedStreamDeletionTimeout>60000</UnusedStreamDeletionTimeout>
				</Properties>
				<!--
					<Origin>
					<Location>/app/stream</Location>
					<Pass>
						<Scheme>ovt</Scheme>
						<Urls>
							<Url>origin.com:9000/app/stream_720p</Url>
						</Urls>
					</Pass>
				</Origin>
				<Origin>
					<Location>/app/</Location>
					<Pass>
						<Scheme>ovt</Scheme>
						<Urls>
							<Url>origin.com:9000/app/</Url>
						</Urls>
					</Pass>
				</Origin>
				-->
				<Origin>
					<Location>/</Location>
					<Pass>
						<Scheme>ovt</Scheme>
						<Urls>
							<Url>${env:OME_DEFAULT_ORIGIN_SERVER_ADDR:}/</Url>
						</Urls>
						<!--
							Whether to pass the query string to the origin server in the URL the user requested to play (used by some RTSP servers)
							default : true
						-->
						<ForwardQueryParams>true</ForwardQueryParams>
					</Pass>
				</Origin>
			</Origins>

			<!--
			<OriginMapStore>
				In order to use OriginMap, you must enable OVT Publisher in Origin and OVT Provider in Edge.
				<RedisServer>
					<Host>192.168.0.160:6379</Host>
					<Auth>!@#ovenmediaengine</Auth>
				</RedisServer>

				This is only needed for the origin server and used to register the ovt address of the stream.
				<OriginHostName>ome-dev.airensoft.com</OriginHostName>
			</OriginMapStore>
			-->

			<!-- Settings for applications -->
			<Applications>
				<Application>
					<Name>app</Name>
					<!-- Application type (live/vod) -->
					<Type>live</Type>
					<OutputProfiles>
						<OutputProfile>
							<!-- Enable this configuration if you want to hardware acceleration using GPU -->
							<Name>bypass_stream</Name>
							<OutputStreamName>${OriginStreamName}</OutputStreamName>

							<!--
							You can provide ABR with Playlist. Currently, ABR is only supported in LLHLS.

							<Playlist>
								<Name>Paid</Name>
								You can play this playlist with
								LLHLS : http[s]://<domain>[:port]/<app>/<stream>/<FileName>.m3u8
								WebRTC : ws[s]://<domain>[:port]/<app>/<stream>/<FileName>
								Note that the keywords "playlist" and "chunklist" MUST NOT be included in FileName.
								<FileName>premium</FileName>

								Options is optional.
								<Options>
									WebRtcAutoAbr : Default value is true
									<WebRtcAutoAbr>true</WebRtcAutoAbr>
								</Options>

								<Rendition>
									<Name>bypass</Name>
									<Video>bypass_video</Video>
									<Audio>bypass_audio</Audio>
								</Rendition>
								<Rendition>
									<Name>480p</Name>
									<Video>480p</Video>
									<Audio>bypass_audio</Audio>
								</Rendition>
								<Rendition>
									<Name>720p</Name>
									<Video>720p</Video>
									<Audio>bypass_audio</Audio>
								</Rendition>
							</Playlist>
							<Playlist>
								<Name>free</Name>
								<FileName>free</FileName>
								<Rendition>
									<Name>720p</Name>
									<Video>720p</Video>
									<Audio>bypass_audio</Audio>
								</Rendition>
							</Playlist>
							-->

							<Encodes>
								<Video>
									<Name>bypass_video</Name>
									<Bypass>true</Bypass>
								</Video>
								<Audio>
									<Name>aac_audio</Name>
									<Codec>aac</Codec>
									<Bitrate>128000</Bitrate>
									<Samplerate>48000</Samplerate>
									<Channel>2</Channel>
									<BypassIfMatch>
										<Codec>eq</Codec>
									</BypassIfMatch>
								</Audio>
								<Audio>
									<Name>opus_audio</Name>
									<Codec>opus</Codec>
									<Bitrate>128000</Bitrate>
									<Samplerate>48000</Samplerate>
									<Channel>2</Channel>
									<BypassIfMatch>
										<Codec>eq</Codec>
									</BypassIfMatch>
								</Audio>
							</Encodes>
						</OutputProfile>
					</OutputProfiles>
					<Providers>
						<OVT />
						<WebRTC />
						<RTMP>
							<BlockDuplicateStreamName>${env:OME_BLOCK_DUPLICATE_STREAM_NAME:false}</BlockDuplicateStreamName>
						</RTMP>
						<SRT />
						<RTSPPull />
					</Providers>
					<Publishers>
						<AppWorkerCount>1</AppWorkerCount>
						<StreamWorkerCount>8</StreamWorkerCount>
						<OVT />
						<WebRTC>
							<Timeout>30000</Timeout>
							<Rtx>${env:OME_WEBRTC_RTX:false}</Rtx>
							<Ulpfec>${env:OME_WEBRTC_ULPFEC:false}</Ulpfec>
							<JitterBuffer>${env:OME_WEBRTC_JITTER_BUFFER:false}</JitterBuffer>
						</WebRTC>
						<LLHLS>
							<ChunkDuration>0.2</ChunkDuration>
							<SegmentDuration>6</SegmentDuration>
							<SegmentCount>10</SegmentCount>
							<DVR>
								<Enable>false</Enable>
								<TempStoragePath>/tmp/ome_dvr/</TempStoragePath>
								<MaxDuration>3600</MaxDuration>
							</DVR>
							<CrossDomains>
								<Url>*</Url>
							</CrossDomains>
						</LLHLS>
						<RTMPPush />
					</Publishers>
				</Application>
			</Applications>
		</VirtualHost>
	</VirtualHosts>
</Server>
